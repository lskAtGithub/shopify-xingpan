<section class="get-report-section">
  <div class="report-container">
    <div class="bg-gradient-to-br">
      <div class="flex-wrap">
        
        <!-- 左侧内容 -->
        <div class="left-content">
          {% if section.settings.heading != blank %}
            <h2>{{ section.settings.heading }}</h2>
          {% endif %}

          {% if section.settings.subheading != blank %}
            <p>{{ section.settings.subheading }}</p>
          {% endif %}

          <div class="note-line">
            <i class="fa fa-star"></i>
            <p>{{ section.settings.note_text }}</p>
          </div>

          {% if section.settings.top_image != blank %}
            <div class="top-img-container">
              <img src="{{ section.settings.top_image | image_url: width: 800 }}" alt="{{ section.settings.heading }}" class="top-img">
            </div>
          {% endif %}
        </div>

        <!-- 右侧表单 -->
        <div class="form-container">
          <form action="#">
            <div class="form-group">
              <label for="name">Full Name <span class="required">*</span></label>
              <input type="text" id="name" name="name" placeholder="Enter your full name" required>
            </div>

            <div class="form-group">
              <label>Birth Date & Time <span class="required">*</span></label>
              <div class="grid-cols-3">
                <div>
                  <label for="birth-year">Year</label>
                  <input type="number" id="birth-year" name="birth_year" min="1900" max="2023" placeholder="YYYY" required>
                </div>
                <div>
                  <label for="birth-month">Month</label>
                  <select id="birth-month" name="birth_month" required>
                    <option value="">Select</option>
                    {% for m in (1..12) %}
                      <option value="{{ m }}">{{ m }}</option>
                    {% endfor %}
                  </select>
                </div>
                <div>
                  <label for="birth-day">Day</label>
                  <input type="number" id="birth-day" name="birth_day" min="1" max="31" placeholder="DD" required>
                </div>
              </div>

              <div class="grid-cols-2">
                <div>
                  <label for="birth-hour">Hour (24h)</label>
                  <input type="number" id="birth-hour" name="birth_hour" min="0" max="23" placeholder="HH" required>
                </div>
                <div>
                  <label for="birth-minute">Minute</label>
                  <input type="number" id="birth-minute" name="birth_minute" min="0" max="59" placeholder="MM" required>
                </div>
              </div>
            </div>

            <!-- 出生地选择器 -->
            <div class="form-group">
              <label>Birth Location <span class="required">*</span></label>
              <div class="grid-cols-3">
                <div>
                  <label for="country">Country</label>
                  <select id="country" name="country" required>
                    <option value="">Select Country</option>
                  </select>
                </div>
                <div>
                  <label for="state">State/Province</label>
                  <select id="state" name="state" disabled required>
                    <option value="">Select State/Province</option>
                  </select>
                </div>
                <div>
                  <label for="city">City</label>
                  <select id="city" name="city" disabled required>
                    <option value="">Select City</option>
                  </select>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label class="checkbox-label">
                <input type="checkbox" id="daylight-saving" name="daylight_saving">
                <span>Daylight Saving Time was in effect at birth</span>
              </label>
            </div>

            <button id="submit" class="gradient-btn">
              <span>{{ section.settings.button_text }}</span>
              <i class="fa fa-arrow-right"></i>
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const countrySelect = document.getElementById('country');
      const stateSelect = document.getElementById('state');
      const citySelect = document.getElementById('city');
      const API_URL = 'http://nacos.heartbuy.cn/city/creatReport';

      const PLACEHOLDERS = {
        country: 'Select Country',
        state: 'Select State/Province',
        city: 'Select City'
      };

      function createOption(text, value = '') {
        const opt = document.createElement('option');
        opt.value = value;
        opt.textContent = text;
        return opt;
      }

      function resetSelect(select, placeholder) {
        select.innerHTML = '';
        select.appendChild(createOption(placeholder, ''));
        select.disabled = true;
      }

      function setLoading(select) {
        select.innerHTML = '';
        select.appendChild(createOption('Loading...', ''));
        select.disabled = true;
      }

      function populateSelectWithObjects(select, items, textKey = 'name', valueKey = 'id') {
        select.innerHTML = '';
        select.appendChild(createOption(select === countrySelect ? PLACEHOLDERS.country : (select === stateSelect ? PLACEHOLDERS.state : PLACEHOLDERS.city), ''));
        if (!items || !items.length) {
          select.disabled = true;
          return;
        }
        items.forEach(item => {
          const text = (item && (item[textKey] || item.name || String(item))) || '';
          const value = (item && (item[valueKey] !== undefined ? item[valueKey] : (item.id !== undefined ? item.id : item))) || '';
          const opt = createOption(text, value);
          select.appendChild(opt);
        });
        select.disabled = false;
      }

      async function fetchFromApi(params = {}) {
        // 构造带查询串的 URL
        const url = new URL(API_URL);
        Object.keys(params).forEach(k => {
          if (params[k] !== undefined && params[k] !== null && params[k] !== '') url.searchParams.append(k, params[k]);
        });

        try {
          const res = await fetch(url.toString(), { method: 'GET', mode: 'cors' });
          if (!res.ok) {
            throw new Error('HTTP ' + res.status);
          }
          const json = await res.json();
          // 兼容：返回包裹 { code, message, data: [...] } 的情形
          if (json && Array.isArray(json.data)) {
            return json.data;
          }
          // 有些接口可能直接返回数组
          if (Array.isArray(json)) {
            return json;
          }
          // 兜底返回空数组
          return [];
        } catch (err) {
          return [];
        }
      }

      // 初始化：清空下级
      resetSelect(stateSelect, PLACEHOLDERS.state);
      resetSelect(citySelect, PLACEHOLDERS.city);

      // 加载国家列表（页面加载时）
      (async function loadCountries() {
        setLoading(countrySelect);
        const countries = await fetchFromApi(); // 不传参数 => 返回国家列表（你给的示例即为此）
        populateSelectWithObjects(countrySelect, countries, 'name', 'id');
      })();

      // 当国家改变时，加载州/省
      countrySelect.addEventListener('change', async function() {
        const countryId = this.value;
        // 清空州和市
        resetSelect(stateSelect, PLACEHOLDERS.state);
        resetSelect(citySelect, PLACEHOLDERS.city);
        if (!countryId) return;

        setLoading(stateSelect);
        const states = await fetchFromApi({ countryId: countryId });
        populateSelectWithObjects(stateSelect, states, 'name', 'id');
      });

      // 当州/省改变时，加载城市
      stateSelect.addEventListener('change', async function() {
        const stateId = this.value;
        const countryId = countrySelect.value;
        resetSelect(citySelect, PLACEHOLDERS.city);
        if (!countryId || !stateId) return;

        setLoading(citySelect);
        const cities = await fetchFromApi({ countryId: countryId, stateId: stateId });
        populateSelectWithObjects(citySelect, cities, 'name', 'id');
      });
      //  提交表单
      const form = document.querySelector("form");
      form.addEventListener("submit", async function (e) {
        e.preventDefault();
        const name = document.getElementById("name").value.trim();
        const year = document.getElementById("birth-year").value;
        const month = document.getElementById("birth-month").value;
        const day = document.getElementById("birth-day").value;
        const hour = document.getElementById("birth-hour").value;
        const minute = document.getElementById("birth-minute").value;
        const country = document.getElementById("country").value;
        const state = document.getElementById("state").value;
        const city = document.getElementById("city").value;

        // if (!country) return alert("请选择国家");
        // if (!state) return alert("请选择省份/州");
        // if (!city) return alert("请选择城市");

        // 3. 拼接时间 "YYYY-MM-DD HH:mm:ss"
        const time = `${year}-${String(month).padStart(2, "0")}-${String(day).padStart(2, "0")} ${String(hour).padStart(2, "0")}:${String(minute).padStart(2, "0")}:00`;

        // const address = `${country} ${state} ${city};

        const payload = {
          time: time,
          lat: 31.887503,
          lon: 117.30746,
          name: name,
          address: '中国深圳南山',
          ztime: 8,
          tid: 4,
        };

        // 6. 拼接 GET 参数
        const query = new URLSearchParams(payload).toString();
        const url = "http://nacos.heartbuy.cn/astrology/astrology?" + query;


        try {
          const res = await fetch(url);
          const data = await res.json();
          console.log("返回结果：", data);
        } catch (err) {
          alert("请求失败，请稍后再试");
        }
      });
    });
  </script>





  {% schema %}
  {
    "name": "Get Report Section",
    "settings": [
      {"type": "text", "id": "heading", "label": "标题", "default": "Discover Your Elemental Energy"},
      {"type": "textarea", "id": "subheading", "label": "副标题/描述", "default": "Uncover your strongest & weakest elements—find your perfect crystal art to balance your energy."},
      {"type": "text", "id": "note_text", "label": "提示文字", "default": "Free personalized report for first-time visitors"},
      {"type": "image_picker", "id": "top_image", "label": "顶部图片"},
      {"type": "text", "id": "button_text", "label": "按钮文字", "default": "Get Your Free Mini Report"}
    ],
    "presets": [{"name": "Get Report Section", "category": "Custom"}]
  }
  {% endschema %}
</section>
