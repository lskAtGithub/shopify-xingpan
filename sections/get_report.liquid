<section class="get-report-section">
  <div class="report-container">
    <div class="bg-gradient-to-br">
      <div class="flex-wrap">
        <!-- 左侧内容 -->
        <div class="left-content">
          {% if section.settings.heading != blank %}
            <h2>{{ section.settings.heading }}</h2>
          {% endif %}

          {% if section.settings.subheading != blank %}
            <p>{{ section.settings.subheading }}</p>
          {% endif %}

          <div class="note-line">
            <i class="fa fa-star"></i>
            <p>{{ section.settings.note_text }}</p>
          </div>

          {% if section.settings.top_image != blank %}
            <div class="top-img-container">
              <img
                src="{{ section.settings.top_image | image_url: width: 800 }}"
                alt="{{ section.settings.heading }}"
                class="top-img"
                width="800"
                height="{{ section.settings.top_image.height | times: 300 | divided_by: section.settings.top_image.width }}"
              >
            </div>
          {% endif %}
        </div>

        <!-- 右侧表单 -->
        <div class="form-container">
          <form>
            <div class="form-group">
              <label for="name">Full Name <span class="required">*</span></label>
              <input type="text" id="name" name="name" placeholder="Enter your full name" required value="jack">
            </div>

            <div class="form-group">
              <label>Birth Date & Time <span class="required">*</span></label>
              <div class="grid-cols-3">
                <div>
                  <label for="birth-year">Year</label>
                  <input
                    type="number"
                    id="birth-year"
                    name="birth_year"
                    min="1900"
                    max="2023"
                    placeholder="YYYY"
                    required
                    value="2000"
                  >
                </div>
                <div>
                  <label for="birth-month">Month</label>
                  <select id="birth-month" name="birth_month" required value="1">
                    <option value="">Select</option>
                    {% for m in (1..12) %}
                      <option value="{{ m }}">{{ m }}</option>
                    {% endfor %}
                  </select>
                </div>
                <div>
                  <label for="birth-day">Day</label>
                  <input
                    type="number"
                    id="birth-day"
                    name="birth_day"
                    min="1"
                    max="31"
                    placeholder="DD"
                    required
                    value="1"
                  >
                </div>
              </div>

              <div class="grid-cols-2">
                <div>
                  <label for="birth-hour">Hour (24h)</label>
                  <input
                    type="number"
                    id="birth-hour"
                    name="birth_hour"
                    min="0"
                    max="23"
                    placeholder="HH"
                    required
                    value="1"
                  >
                </div>
                <div>
                  <label for="birth-minute">Minute</label>
                  <input
                    type="number"
                    id="birth-minute"
                    name="birth_minute"
                    min="0"
                    max="59"
                    placeholder="MM"
                    required
                    value="1"
                  >
                </div>
              </div>
            </div>

            <!-- 出生地选择器 -->
            <div class="form-group">
              <label>Birth Location <span class="required">*</span></label>
              <div class="grid-cols-3">
                <div>
                  <label for="country">Country</label>
                  <select id="country" name="country" required>
                    <option value="">Select Country</option>
                  </select>
                </div>
                <div>
                  <label for="state">State/Province</label>
                  <select id="state" name="state" disabled required>
                    <option value="">Select State/Province</option>
                  </select>
                </div>
                <div>
                  <label for="city">City</label>
                  <select id="city" name="city" disabled required>
                    <option value="">Select City</option>
                  </select>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label class="checkbox-label">
                <input type="checkbox" id="daylight-saving" name="daylight_saving">
                <span>Daylight Saving Time was in effect at birth</span>
              </label>
            </div>

            <button id="submit" class="gradient-btn">
              <span>{{ section.settings.button_text }}</span>
              <i class="fa fa-arrow-right"></i>
            </button>
          </form>
        </div>
      </div>

      <!-- 🔹 弹窗结构 -->
      <div id="report-modal" class="report-modal">
        <div class="report-modal-content">
          <span class="report-close">&times;</span>
          <h2>✨ 报告结果</h2>

          <!-- 表格 -->
          <table class="table table-hover" id="report-table">
            <thead>
              <tr>
                <th>星座</th>
                <th>行星</th>
                <th>庙旺</th>
                <th>星座元素</th>
                <th>行星-元素分</th>
                <th>庙旺元素分</th>
                <th>行星所落宫位</th>
                <th>宫位元素</th>
                <th>宫位元素分</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>

          <!-- 百分比圆形图 -->
          <div class="canvas-box">
            <div id="tooltip"></div>
            <canvas id="chartCanvas" width="400" height="400" style="width:400px;height:400px;"></canvas>
          </div>
          <!-- 流数据渲染 -->
          <div style="font-size: 16px;color: #BBB;" id="markdownRea" >
            </div>
          <div id="streamData"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    let lat = '31.887503';
    let lon = '117.30746';
    let reportId = '';
    document.addEventListener('DOMContentLoaded', function () {
      const countrySelect = document.getElementById('country');
      const stateSelect = document.getElementById('state');
      const citySelect = document.getElementById('city');
      const API_URL = 'https://nacos.heartbuy.cn/city/getInfo';

      const PLACEHOLDERS = {
        country: 'Select Country',
        state: 'Select State/Province',
        city: 'Select City',
      };

      function createOption(text, value = '') {
        const opt = document.createElement('option');
        opt.value = value;
        opt.textContent = text;
        return opt;
      }

      function resetSelect(select, placeholder) {
        select.innerHTML = '';
        select.appendChild(createOption(placeholder, ''));
        select.disabled = true;
      }

      function setLoading(select) {
        select.innerHTML = '';
        select.appendChild(createOption('Loading...', ''));
        select.disabled = true;
      }

      function populateSelectWithObjects(select, items, textKey = 'name', valueKey = 'id') {
        select.innerHTML = '';
        select.appendChild(
          createOption(
            select === countrySelect
              ? PLACEHOLDERS.country
              : select === stateSelect
              ? PLACEHOLDERS.state
              : PLACEHOLDERS.city,
            ''
          )
        );
        if (!items || !items.length) {
          select.disabled = true;
          return;
        }
        items.forEach((item) => {
          const text = (item && (item[textKey] || item.name || String(item))) || '';
          const value =
            (item && (item[valueKey] !== undefined ? item[valueKey] : item.id !== undefined ? item.id : item)) || '';
          const opt = createOption(text, value);
          select.appendChild(opt);
          opt.dataset.latitude = item.latitude;
          opt.dataset.longitude = item.longitude;
        });
        select.disabled = false;
      }

      async function fetchFromApi(params = {}) {
        // 构造带查询串的 URL
        const url = new URL(API_URL);
        Object.keys(params).forEach((k) => {
          if (params[k] !== undefined && params[k] !== null && params[k] !== '') url.searchParams.append(k, params[k]);
        });

        try {
          const res = await fetch(url.toString(), { method: 'GET', mode: 'cors' });
          if (!res.ok) {
            throw new Error('HTTP ' + res.status);
          }
          const json = await res.json();
          // 兼容：返回包裹 { code, message, data: [...] } 的情形
          if (json && Array.isArray(json.data)) {
            return json.data;
          }
          // 有些接口可能直接返回数组
          if (Array.isArray(json)) {
            return json;
          }
          // 兜底返回空数组
          return [];
        } catch (err) {
          return [];
        }
      }

      // 初始化：清空下级
      resetSelect(stateSelect, PLACEHOLDERS.state);
      resetSelect(citySelect, PLACEHOLDERS.city);

      // 加载国家列表（页面加载时）
      (async function loadCountries() {
        setLoading(countrySelect);
        const countries = await fetchFromApi(); // 不传参数 => 返回国家列表（你给的示例即为此）
        populateSelectWithObjects(countrySelect, countries, 'name', 'id');
      })();

      // 当国家改变时，加载州/省
      countrySelect.addEventListener('change', async function () {
        const countryId = this.value;
        // 清空州和市
        resetSelect(stateSelect, PLACEHOLDERS.state);
        resetSelect(citySelect, PLACEHOLDERS.city);
        if (!countryId) return;

        setLoading(stateSelect);
        const states = await fetchFromApi({ countryId: countryId });
        populateSelectWithObjects(stateSelect, states, 'name', 'id');
      });

      // 当州/省改变时，加载城市
      stateSelect.addEventListener('change', async function () {
        const stateId = this.value;
        const countryId = countrySelect.value;
        resetSelect(citySelect, PLACEHOLDERS.city);
        if (!countryId || !stateId) return;

        setLoading(citySelect);
        const cities = await fetchFromApi({ countryId: '', stateId: stateId });
        populateSelectWithObjects(citySelect, cities, 'name', 'id');
      });
      citySelect.addEventListener('change', async function () {
        const opt = this.options[this.selectedIndex];
        lat = opt.dataset.latitude;
        lon = opt.dataset.longitude;
      });
      //  提交表单
      const form = document.querySelector('form');
      form.addEventListener('submit', async function (e) {
        e.preventDefault();
        const name = document.getElementById('name').value.trim();
        const year = document.getElementById('birth-year').value;
        const month = document.getElementById('birth-month').value;
        const day = document.getElementById('birth-day').value;
        const hour = document.getElementById('birth-hour').value;
        const minute = document.getElementById('birth-minute').value;
        const country = document.getElementById('country').value;
        const state = document.getElementById('state').value;
        const city = document.getElementById('city').value;
        const time = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')} ${String(hour).padStart(
          2,
          '0'
        )}:${String(minute).padStart(2, '0')}:00`;

        const address = `${country} ${state} ${city}`;
        const payload = {
          time: time,
          lat: lat,
          lon: lon,
          name: name,
          address: address,
          ztime: 8,
          tid: 4,
        };
        const query = new URLSearchParams(payload).toString();
        const url = 'https://nacos.heartbuy.cn/astrology/astrology?' + query;

        try {
          const res = await fetch(url);
          const data = await res.json();
          console.log('返回结果：', data);
          reportId = data.data.reportId;
          renderModal(data.data);
          loadStream();
        } catch (err) {
          alert('请求失败，请稍后再试');
        }
        return false;
      });

      const modal = document.getElementById('report-modal');
      const closeBtn = document.querySelector('.report-close');
      const tableBody = document.querySelector('#report-table tbody');

      function loadStream() {
        const streamData = document.getElementById('streamData');
        const markdownRea = document.getElementById('markdownRea');

        const eventSource = new EventSource(`/astrology/doubao?id=4&reportId=${reportId}`);
        var content = '';
        var reason = '';
        eventSource.onmessage = function (eventStream) {
          try {
            var json = JSON.parse(eventStream.data);
            var choices = json.choices;
            for (var i = 0; i < choices.length; i++) {
              var item = choices[i].delta;
              if (item.content != undefined && item.content != '') {
                content += item.content;
                streamData.innerHTML = marked.parse(content);
              }

              if (item.reasoning_content != undefined && item.reasoning_content != '') {
                reason += item.reasoning_content;
                markdownRea.innerHTML = marked.parse(reason);
              }
              that.scrollToBottom();
            }
          } catch (e) {}
        };

        eventSource.onerror = function (error) {
          eventSource.close();
        };
      }

      function renderCanvas(res) {
        const data = res.itemScore;
        const baseColors = ['#059bff', '#ff6384', '#ff9f40', '#ffcd56']; // 原始颜色

        const canvas = document.getElementById('chartCanvas');
        const ctx = canvas.getContext('2d');
        const tooltip = document.getElementById('tooltip');

        const total = Object.values(data).reduce((a, b) => a + b, 0);
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radius = Math.min(canvas.width, canvas.height) * 0.35;

        const gap = 1 / radius;

        let slices = [];

        // 提亮颜色函数
        function lightenColor(hex, percent) {
          let num = parseInt(hex.replace('#', ''), 16),
            r = (num >> 16) + Math.round(2.55 * percent),
            g = ((num >> 8) & 0x00ff) + Math.round(2.55 * percent),
            b = (num & 0x0000ff) + Math.round(2.55 * percent);

          return (
            '#' +
            (
              0x1000000 +
              (r < 255 ? (r < 0 ? 0 : r) : 255) * 0x10000 +
              (g < 255 ? (g < 0 ? 0 : g) : 255) * 0x100 +
              (b < 255 ? (b < 0 ? 0 : b) : 255)
            )
              .toString(16)
              .slice(1)
          );
        }

        function draw(highlightIndex = -1) {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          let startAngle = -Math.PI / 2;
          let i = 0;
          slices = [];

          for (let key in data) {
            const value = data[key];
            const sliceAngle = (value / total) * 2 * Math.PI;

            const adjustedStart = startAngle + gap / 2;
            const adjustedEnd = startAngle + sliceAngle - gap / 2;

            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, radius, adjustedStart, adjustedEnd);
            ctx.closePath();

            const baseColor = baseColors[i % baseColors.length];
            ctx.fillStyle = i === highlightIndex ? lightenColor(baseColor, 10) : baseColor;
            ctx.fill();

            slices.push({
              label: key,
              value,
              startAngle: adjustedStart,
              endAngle: adjustedEnd,
              color: ctx.fillStyle,
              centerX,
              centerY,
              radius,
            });

            startAngle += sliceAngle;
            i++;
          }
        }

        draw();

        function angleInSegment(x, y, slice) {
          const dx = x - slice.centerX;
          const dy = y - slice.centerY;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance > slice.radius) return false; // 在圆外

          let angle = Math.atan2(dy, dx);
          if (angle < -Math.PI / 2) angle += 2 * Math.PI; // 修正角度

          return angle >= slice.startAngle && angle <= slice.endAngle;
        }

        canvas.addEventListener('mousemove', function (e) {
          let foundIndex = -1;
          slices.forEach((slice, index) => {
            if (angleInSegment(e.offsetX, e.offsetY, slice)) {
              foundIndex = index;
              tooltip.style.left = e.offsetX + 12 + 'px';
              tooltip.style.top = e.offsetY + 'px';
              tooltip.innerHTML = `<strong style="margin-right:6px">${slice.label}</strong> ${slice.value}`;
              tooltip.style.display = 'block';
            }
          });

          if (foundIndex !== -1) {
            draw(foundIndex); // 高亮
          } else {
            draw(); // 恢复
            tooltip.style.display = 'none';
          }
        });

        canvas.addEventListener('mouseleave', function () {
          draw();
          tooltip.style.display = 'none';
        });
        loadStream();
      }

      async function renderModal(data) {
        modal.style.display = 'flex';
        tableBody.innerHTML = '';
        if (data.list.length > 0) {
          data.list.forEach((item, index) => {
            const miaoWang =
              item.miao === 0 && item.wang === 0
                ? '无'
                : (item.miao > 0 ? '庙' : '') +
                  (item.miao > 0 && item.wang > 0 ? '/' : '') +
                  (item.wang > 0 ? '旺' : '');

            const row = `
          <tr class="${index % 2 === 1 ? 'even-row' : ''}">
            <td>${item.constellationCN}</td>
            <td>${item.starNameCN}</td>
            <td>${miaoWang}</td>
            <td>${item.zodiacSigns}</td>
            <td>${item.starScore}</td>
            <td>${item.miao + item.wang}</td>
            <td>${item.houses ? item.houses : '/'}</td>
            <td>${item.houses ? item.housesName : '/'}</td>
            <td>${item.houses ? item.housesScore : '/'}</td>
          </tr>`;
            tableBody.insertAdjacentHTML('beforeend', row);
          });
        } else {
          tableBody.innerHTML = `
        <tr>
          <td colspan="9" style="text-align: center; color: #999;">
            没有找到匹配的数据
          </td>
        </tr>`;
        }
        renderCanvas(data);
      }

      // 关闭弹窗
      closeBtn.addEventListener('click', function () {
        modal.style.display = 'none';
      });
      window.addEventListener('click', function (e) {
        if (e.target === modal) modal.style.display = 'none';
      });
    });
  </script>

  {% schema %}
{
  "name": "Get Report Section",
  "settings": [
    { "type": "text", "id": "heading", "label": "标题", "default": "Discover Your Elemental Energy" },
    {
      "type": "textarea",
      "id": "subheading",
      "label": "副标题/描述",
      "default": "Uncover your strongest & weakest elements—find your perfect crystal art to balance your energy."
    },
    {
      "type": "text",
      "id": "note_text",
      "label": "提示文字",
      "default": "Free personalized report for first-time visitors"
    },
    { "type": "image_picker", "id": "top_image", "label": "顶部图片" },
    { "type": "text", "id": "button_text", "label": "按钮文字", "default": "Get Your Free Mini Report" }
  ],
  "presets": [{ "name": "Get Report Section", "category": "Custom" }]
}
  {% endschema %}
</section>
